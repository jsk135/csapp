# Execution begins at address 0 
	.pos 0
	irmovq stack, %rsp  	# Set up stack pointer
	call main		# Execute main program
	halt			# Terminate program 

# Sample linked list
    .align 8
ele1:
    .quad 0x00a
    .quad ele2
ele2:
    .quad 0x0b0
    .quad ele3
ele3:
    .quad 0xc00
    .quad 0

main:	irmovq ele1,%rdi
	call sum_list		# sum(array, 4)
	ret

# long sum_list(list_ptr ls)
# ele1 in %rdi
sum_list:
    rrmovq %rsp,%rbp
    rmmovq %rdi,-24(%rbp)
    irmovq $0x0,%rax
    rmmovq %rax,-8(%rbp)
    jmp L2
L3:
    mrmovq -24(%rbp),%rax
    mrmovq (%rax),%rax
    mrmovq -8(%rbp),%rbx
    addq %rax,%rbx
    rmmovq %rbx,-8(%rbp)
    mrmovq -24(%rbp),%rax
    mrmovq 8(%rax),%rax
    rmmovq %rax,-24(%rbp)
L2:
    irmovq $0x0,%rbx
    mrmovq -24(%rbp),%rcx
    subq %rbx,%rcx
    jne L3
    mrmovq -8(%rbp),%rax
    popq %rbp
    ret

# Stack starts here and grows to lower addresses
	.pos 0x200
stack:
